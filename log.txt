app listening in port 4200
[
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'CLIENTS' AND TABLE_SCHEMA = 'IAB2BUSINESS'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'Clients', singular: 'Client' },
    omitNull: false,
    tableName: 'CLIENTS',
    createdAt: false,
    updatedAt: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: '127.0.0.1',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: true,
    attributeBehavior: 'throw',
    port: 3306,
    dialectOptions: { flags: [Object] },
    match: /IAB2BUSINESS/,
    type: 'SHOWTABLES'
  }
]
[
  'Executing (default): SHOW INDEX FROM `CLIENTS`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'Clients', singular: 'Client' },
    omitNull: false,
    tableName: 'CLIENTS',
    createdAt: false,
    updatedAt: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: '127.0.0.1',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: true,
    attributeBehavior: 'throw',
    port: 3306,
    dialectOptions: { flags: [Object] },
    match: /IAB2BUSINESS/,
    type: 'SHOWINDEXES'
  }
]
[
  "Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'PROVIDERS' AND TABLE_SCHEMA = 'IAB2BUSINESS'",
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'Providers', singular: 'Provider' },
    omitNull: false,
    tableName: 'PROVIDERS',
    createdAt: false,
    updatedAt: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: '127.0.0.1',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: true,
    attributeBehavior: 'throw',
    port: 3306,
    dialectOptions: { flags: [Object] },
    match: /IAB2BUSINESS/,
    type: 'SHOWTABLES'
  }
]
[
  'Executing (default): SHOW INDEX FROM `PROVIDERS`',
  {
    plain: false,
    raw: true,
    logging: [Function: logging],
    showWarnings: false,
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: null,
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    whereMergeStrategy: 'overwrite',
    name: { plural: 'Providers', singular: 'Provider' },
    omitNull: false,
    tableName: 'PROVIDERS',
    createdAt: false,
    updatedAt: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [MySQLQueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager]
    },
    hooks: true,
    dialect: 'mysql',
    dialectModule: null,
    dialectModulePath: null,
    host: '127.0.0.1',
    protocol: 'tcp',
    define: {},
    query: {},
    sync: {},
    timezone: '+00:00',
    standardConformingStrings: true,
    native: false,
    replication: false,
    ssl: undefined,
    pool: {},
    quoteIdentifiers: true,
    retry: { max: 5, match: [Array] },
    transactionType: 'DEFERRED',
    isolationLevel: null,
    databaseVersion: 0,
    typeValidation: false,
    benchmark: false,
    minifyAliases: false,
    logQueryParameters: true,
    attributeBehavior: 'throw',
    port: 3306,
    dialectOptions: { flags: [Object] },
    match: /IAB2BUSINESS/,
    type: 'SHOWINDEXES'
  }
]
connect successfully!
Entering in method authenticateUser(headers: IncomingHttpHeaders)
Entering in method Secure.getBasicUser(header: IncomingHttpHeaders): string[] | null
Entering in method ProviderController.deleteProviderByID(): Promise<void>
Entering in method AbstractController.deleteByID(id: object = [object Object]): Promise<MessageOBJ>
[
  "Executing (default): DELETE FROM `PROVIDERS` WHERE `PROVIDERID` = '1'",
  {
    plain: false,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: { PROVIDERID: '1' },
    hooks: true,
    individualHooks: false,
    force: false,
    cascade: false,
    restartIdentity: false,
    type: 'BULKDELETE',
    model: Provider,
    limit: null
  }
]
[
  "Executing (default): SELECT `PROVIDERID`, `PRVNAME`, `PRVEMAIL`, `PRVPASSWORD`, `PRVCNPJ`, `PRVBUSINESSNAME`, `PRVFANTASYNAME`, `PRVSOCIALREASON`, `PRVSECTORACTING`, `PRVCREATEDATE`, `PRVUPDATEDATE` FROM `PROVIDERS` AS `Provider` WHERE `Provider`.`PROVIDERID` = '1';",
  {
    plain: true,
    raw: false,
    logging: [Function: logging],
    showWarnings: false,
    where: "`Provider`.`PROVIDERID` = '1'",
    hooks: true,
    rejectOnEmpty: false,
    originalAttributes: [
      'PROVIDERID',
      'PRVNAME',
      'PRVEMAIL',
      'PRVPASSWORD',
      'PRVCNPJ',
      'PRVBUSINESSNAME',
      'PRVFANTASYNAME',
      'PRVSOCIALREASON',
      'PRVSECTORACTING',
      'PRVCREATEDATE',
      'PRVUPDATEDATE'
    ],
    attributes: [
      'PROVIDERID',
      'PRVNAME',
      'PRVEMAIL',
      'PRVPASSWORD',
      'PRVCNPJ',
      'PRVBUSINESSNAME',
      'PRVFANTASYNAME',
      'PRVSOCIALREASON',
      'PRVSECTORACTING',
      'PRVCREATEDATE',
      'PRVUPDATEDATE'
    ],
    tableNames: [ 'PROVIDERS' ],
    type: 'SELECT',
    model: Provider
  }
]
Entering in method Secure.validatePass(token: string, model: any): Promise<void>
Provider {
  dataValues: {
    PROVIDERID: 1,
    PRVNAME: 'NOME GENERICO 123',
    PRVEMAIL: 'ninguemaquitenta@gmail.com',
    PRVPASSWORD: '$2a$12$y5KJTtFkArjMMtZmlenywu8UJSVCiMnB0KvfwPx77syvg9FZIKlhq',
    PRVCNPJ: '123456788',
    PRVBUSINESSNAME: 'WISEUP',
    PRVFANTASYNAME: 'WISEUP',
    PRVSOCIALREASON: 'INGLES',
    PRVSECTORACTING: 'INGLES',
    PRVCREATEDATE: '018/3/2024 0:19:18',
    PRVUPDATEDATE: '018/3/2024 0:23:12'
  },
  _previousDataValues: {
    PROVIDERID: 1,
    PRVNAME: 'NOME GENERICO 123',
    PRVEMAIL: 'ninguemaquitenta@gmail.com',
    PRVPASSWORD: '$2a$12$y5KJTtFkArjMMtZmlenywu8UJSVCiMnB0KvfwPx77syvg9FZIKlhq',
    PRVCNPJ: '123456788',
    PRVBUSINESSNAME: 'WISEUP',
    PRVFANTASYNAME: 'WISEUP',
    PRVSOCIALREASON: 'INGLES',
    PRVSECTORACTING: 'INGLES',
    PRVCREATEDATE: '018/3/2024 0:19:18',
    PRVUPDATEDATE: '018/3/2024 0:23:12'
  },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: false,
    _schema: null,
    _schemaDelimiter: '',
    raw: true,
    attributes: [
      'PROVIDERID',
      'PRVNAME',
      'PRVEMAIL',
      'PRVPASSWORD',
      'PRVCNPJ',
      'PRVBUSINESSNAME',
      'PRVFANTASYNAME',
      'PRVSOCIALREASON',
      'PRVSECTORACTING',
      'PRVCREATEDATE',
      'PRVUPDATEDATE'
    ]
  },
  isNewRecord: false
}
Entering in method Secure.emailIsRequired(where: any, model: any): Promise<void>
Model destroyed!
